from brownie import (
    network,
    accounts,
    config,
    LinkToken,
    VRFCoordinatorMock,
    Contract,
)
from web3 import Web3

FORKED_LOCAL_ENVIRONMENTS = ["mainnet-fork", "mainnet-fork-dev"]
LOCAL_BLOCKCHAIN_ENVIRONMENTS = [
    "development",
    "ganache",
    "ganache-local",
    "mainnet-fork",
]

OPENSEA_TESTNET_FORMAT: str = "https://testnets.opensea.io/assets/{}/{}"
BREED_MAPPING: dict = {0: "PUG", 1: "SHIBA_INU", 2: "ST_BERNARD"}

CONTRACT_TO_MOCK: dict = {
    "link_token": LinkToken,
    "vrf_coordinator": VRFCoordinatorMock,
}


def get_breed(breed_number) -> str:
    return BREED_MAPPING[breed_number]


def get_account(index=None, account_id=None):
    if index is not None:
        return accounts[index]
    if account_id is not None:
        return accounts.load(id)
    active_network: str = network.show_active()
    if (
        active_network in LOCAL_BLOCKCHAIN_ENVIRONMENTS
        or active_network in FORKED_LOCAL_ENVIRONMENTS
    ):
        # use one of the accounts automatically generated by brownie
        return accounts[0]
    return accounts.add(config["wallets"]["from_key"])


def get_contract(contract_name):
    contract_type = CONTRACT_TO_MOCK[contract_name]
    if network.show_active() in LOCAL_BLOCKCHAIN_ENVIRONMENTS:
        if len(contract_type) <= 0:
            deploy_mocks()
        return contract_type[-1]
    else:
        contract_address = config["networks"][network.show_active()][contract_name]
        return Contract.from_abi(
            contract_type._name, contract_address, contract_type.abi
        )


def deploy_mocks():
    print("Deploying mocks...")
    account = get_account()
    print("\tLinkToken...")
    link_token = LinkToken.deploy({"from": account})
    print(f"\t\tLinkToken deployed to {link_token.address}")
    print("\tMockVRFCoordinator...")
    vrf_coordinator = VRFCoordinatorMock.deploy(link_token.address, {"from": account})
    print(f"\t\tMockVRFCoordinator deployed to {vrf_coordinator.address}")
    print("Done")


def fund_contract_with_link(
    contract_address, account=None, link_token=None, amount=Web3.toWei(0.1, "ether")
):
    account = account or get_account()
    link_token = link_token or get_contract("link_token")
    funding_tx = link_token.transfer(contract_address, amount, {"from": account})
    funding_tx.wait(1)
    print(f"Funded {contract_address}")
    return funding_tx
